//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Threading;

namespace {{NamespaceName}} {
    {{ nr = 0}}
    {{~ for kvp in DictNameField_Methods ~}}
      {{~ for mi in kvp.Value ~}}
      {{ nr = nr +1 }}
          {{ if mi.NrParameters > 0 }}
    public record rec{{mi.Name}}_{{mi.HashCodeParams}}_{{nr}}({{mi.parametersDefinitionCSharp }});
          {{ end }}
      {{~ end ~}}
      
    {{~ end ~}}

    /// <summary>
    /// Generates code from  {{ClassName}}
    /// </summary>
  [CompilerGenerated]
  [GeneratedCode("SkinnyControllersGenerator", "{{version}}")]
  partial class {{ClassName}}{ 
    /*
    [HttpGet()]
    public int id(){
    System.Diagnostics.Debugger.Break();
    return 1;
    } 
    */
    {{ nr = 0}}
    {{~ for kvp in DictNameField_Methods ~}}
      {{~ for mi in kvp.Value ~}}
         {{
            nr=nr +1;        
            argumentFunction="";
            if mi.NrParameters > 0 
                argumentFunction = "rec" +mi.Name+ "_"+mi.HashCodeParams +"_" + nr + " data";
            end
         }}
        [HttpPost]
        public {{mi.ReturnType}} {{mi.Name}}( {{argumentFunction}} ){
            string userName = null;
            bool success=true;
            try{
                var user = this.User;
                userName = user?.Identity?.Name;           
                if(!string.IsNullOrWhiteSpace(userName))
                    Thread.CurrentPrincipal = this.User;
                _logger.LogInformation("start {{mi.Name}} with user " + userName);
                {{
                    if mi.ReturnsVoid == false
                }}
                    return 
                {{
                    end
                }}
                {{kvp.Key}}.{{mi.Name}}({{ mi.parametersCallWithRecord  }});
            }
            catch(Exception ex){
                success=false;
                _logger.LogError(ex,"error in {{mi.Name}} ");
                throw;
            }
            finally{
                _logger.LogInformation("end {{mi.Name}} : " + success+ " with user " + userName );
            }
        }
    
      {{~ end ~}}
      
    {{~ end ~}}    
  }
}