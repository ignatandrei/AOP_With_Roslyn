//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
namespace {{NamespaceName}} {

    /// <summary>
    /// Generates code from  {{ClassName}}
    /// </summary>
  [GeneratedCode("AOPEF", "{{version}}")]

  [CompilerGenerated]
  partial class {{ClassName}}{ 
   /*
    public int id(){
    System.Diagnostics.Debugger.Break();
    return 1;
    }
    */
    public Task<{{POCOFullName}}[]> GetAll()
    {
        return databaseContext.{{POCOName}}.ToArrayAsync();
    }
    public Task<long> Count()
    {
        return databaseContext.{{POCOName}}.LongCountAsync();
    }
    //very particular TestWebAPI_Searches
    public async Task<TestWebAPI_Searches.PaginatedRecords<{{POCOFullName}}>> SearchPaginated(TestWebAPI_Searches.SearchModel<{{POCOFullName}}> search)
    {
        var query = search.GetSearch(databaseContext.{{POCOName}}, paginated:false);
        var nr = await query.LongCountAsync();
        query = search.GetSearch(databaseContext.{{POCOName}}, paginated: true);
        var data = await query.ToArrayAsync();
        return new TestWebAPI_Searches.PaginatedRecords<{{POCOFullName}}>(nr, data);
         
    }

    public Task<{{POCOFullName}}> FindSingle(Func<{{POCOFullName}} ,bool> f)
    {
        var data = databaseContext.{{POCOName}}.FirstOrDefaultAsync(it=>f(it));
        return data;
    }
    public Task<{{POCOFullName}}[]> FindMultiple(System.Linq.Expressions.Expression<Func<{{POCOFullName}}, bool>> f)
    {
        var data = databaseContext.{{POCOName}}.Where(f);
        return data.ToArrayAsync();
    }

    public async Task<{{POCOFullName}}> Insert({{POCOFullName}} p)
    {
        databaseContext.{{POCOName}}.Add(p);
        await databaseContext.SaveChangesAsync();
        return p;
    }

    public async Task<{{POCOFullName}}> Update({{POCOFullName}} p)
        {
            var original = await FindAfterId(p.{{PK1}});
            if(original == null)
            {
                throw new ArgumentException($"cannot found {{POCOName}}  with id = {p.{{PK1}}} ", nameof(p.{{PK1}}));
            }
            original.CopyPropertiesFrom(other: p);                        
            await databaseContext.SaveChangesAsync();
            return p;
        }
    public async Task<{{POCOFullName}}> Delete({{POCOFullName}} p)
        {
            var original = await FindAfterId(p.{{PK1}});
            databaseContext.{{POCOName}}.Remove(original);
            await databaseContext.SaveChangesAsync();
            return p;
        }

        public Task<{{POCOFullName}}> FindAfterId({{PK1Type}} id)
        {
            var data = databaseContext.{{POCOName}}.FirstOrDefaultAsync(it => it.{{PK1}} == id);
            return data;
        }
        public Task<{{POCOFullName}}[]> FindAfterIds(params {{PK1Type}}[] id)
        {
            if((id?.Length??0) == 0)
                return Task.FromResult(new {{POCOFullName}}[0]);
            var data = databaseContext.{{POCOName}}.Where(it => id.Contains(it.{{PK1}}));
            return data.ToArrayAsync();
        }

  }
}              