//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;

namespace {{NamespaceName}} {

    /// <summary>
    /// Generates code from  {{ClassName}}
    /// </summary>
  [GeneratedCode("AOPMethods", "{{version}}")]
  [CompilerGenerated]
  partial class {{ClassName}}{ 
   /*
    public int id(){
    System.Diagnostics.Debugger.Break();
    return 1;
    } 
    */
    {{~ for mi in Methods ~}}
        {{ 
            separator = "" 
            if(mi.NrParameters > 0)
                separator = "," 
            end
            strAwait = ""
            strAsync =""
            if mi.IsAsync == true
                strAwait = " await "
                strAsync  = " async "
            end
        }}
        public {{strAsync}} {{mi.ReturnType}} {{mi.NewName}} ({{mi.parametersDefinitionCSharp }} {{separator}}  
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0){
            var _cc=ColorFromHash("{{mi.NewName}}".GetHashCode());
            try{
                var cc= Console.ForegroundColor;
                Console.ForegroundColor= _cc;
                Console.WriteLine("--{{mi.Name}} start "+ _cc);
                Console.WriteLine("called class :"+memberName );
                Console.WriteLine("called file :"+sourceFilePath );
                Console.WriteLine("called line :"+sourceLineNumber );
               // Console.ForegroundColor = cc;
            {{
                if mi.ReturnsVoid == false
            }}
                return 
            {{
                end
            }}
            {{  strAwait }}

            {{mi.Name}}({{ mi.parametersCallCSharp }});
            }
            catch(Exception ex){
                var cc= Console.ForegroundColor;
                Console.ForegroundColor= ConsoleColor.Red;
                Console.WriteLine("error in {{mi.Name}}:" + ex.Message);
                Console.ForegroundColor = cc;
                throw;
            }
            finally{
                var cc= Console.ForegroundColor;
                Console.ForegroundColor= _cc;            
                Console.WriteLine("--------{{mi.Name}} end");
                Console.ForegroundColor = cc;

            }


        }

      
    {{~ end ~}}
    private static ConsoleColor ColorFromHash(int srcHash)
        {
            var nr = Math.Abs(srcHash) %15+1;
            return Enum.Parse<ConsoleColor>(nr.ToString());
            
        }
    
  }
}              