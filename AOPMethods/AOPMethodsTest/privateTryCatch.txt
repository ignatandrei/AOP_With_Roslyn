//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;

{{
    nrProps=0
    for mi in Properties 
        nrProps = nrProps+1
    end    

}}
namespace {{NamespaceName}} {

    {{ if nrProps > 0}}
     [GeneratedCode("AOPMethods", "{{version}}")]
    [CompilerGenerated]
    public enum {{ClassName}}_EnumProps{
        None
        {{~ for mi in Properties ~}}
        ,{{mi.Name}} // {{mi.Accesibility}} 
        {{~ end ~}}
    }



    [GeneratedCode("AOPMethods", "{{version}}")]
    [CompilerGenerated]
    partial class {{ClassName}}_Metadata{
    {{~ for mi in Properties ~}}
        public const string {{mi.Name}} = "{{mi.Name}}";
    {{~ end ~}}
    

    }
    {{ end }}
    /// <summary>
    /// Generates code from  {{ClassName}}
    /// </summary>
  partial class {{ClassName}}{ 
   /*
    public int id(){
    System.Diagnostics.Debugger.Break();
    return 1;
    } 
    */
    {{~ for mi in Methods ~}}
      {{ 
            separator = "" 
            if(mi.NrParameters > 0)
                separator = "," 
            end
            strAwait = ""
            strAsync =""
            if mi.ShouldUseAsync == true
                strAwait = " await "
                strAsync  = " async "
            end
        }}  
        private {{strAsync}} {{mi.ReturnType}} {{mi.NewName}} ({{mi.parametersDefinitionCSharp }}){
            try{
                Console.WriteLine("before calling method {{mi.Name}}");
            {{
                if mi.ReturnsVoid == false
            }}
                return 
            {{
                end
            }}
            {{strAwait}} {{mi.Name}}({{ mi.parametersCallCSharp }});
            }
            catch(Exception ex){
                Console.WriteLine("error in {{mi.Name}}:" + ex.Message);
                throw;
            }
            finally{
                Console.WriteLine("after calling {{mi.Name}}");
            }


        }

      
    {{~ end ~}}
    
  }
}              